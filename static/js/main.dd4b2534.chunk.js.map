{"version":3,"sources":["Sidebar.js","Dashboard.js","Home.js","AddBudget.js","UserDetails.js","Setting.js","App.js","serviceWorker.js","index.js"],"names":["Sidebar","useState","currentTab","setcurrentTab","onClick","e","key","selectedKeys","theme","mode","Item","to","type","style","float","newColumns","title","dataIndex","Title","Typography","Dashboard","dataObj","setDataObj","firebase","database","ref","child","once","snap","val","Fragment","columns","dataSource","size","PageTitle","styled","h1","LiTag","li","items","id","name","dob","List","renderItem","map","defaultProps","item","UserDetails","Setting","App","justify","span","exact","path","component","Home","AddBudget","Boolean","window","location","hostname","match","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dd4b2534.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Menu, Icon } from \"antd\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Sidebar() {\r\n  const [currentTab, setcurrentTab] = useState(\"home\");\r\n\r\n  const handleClick = e => {\r\n    setcurrentTab(e.key);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Menu\r\n        onClick={handleClick}\r\n        selectedKeys={[currentTab]}\r\n        theme=\"dark\"\r\n        mode=\"horizontal\"\r\n      >\r\n        <Menu.Item key=\"home\">\r\n          <Link to=\"/\">\r\n            <Icon type=\"home\" />\r\n            Home\r\n          </Link>\r\n        </Menu.Item>\r\n\r\n        <Menu.Item key=\"dashboard\">\r\n          <Link to=\"/Dashboard\">\r\n            <Icon type=\"dashboard\" /> Dashboard{\" \"}\r\n          </Link>\r\n        </Menu.Item>\r\n\r\n        <Menu.Item key=\"budget\">\r\n          <Link to=\"/AddBudget\">\r\n            <Icon type=\"dollar\" /> Add Budget{\" \"}\r\n          </Link>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"user-details\">\r\n          <Link to=\"/UserDetails\">\r\n            <Icon type=\"user\" /> User Details{\" \"}\r\n          </Link>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"setting\">\r\n          <Link to=\"/Setting\">\r\n            <Icon type=\"setting\" /> Setting{\" \"}\r\n          </Link>\r\n        </Menu.Item>\r\n        <Menu.Item style={{ float: \"right\" }} key=\"logout\">\r\n          <Link to=\"/Logout\">\r\n            <Icon type=\"logout\" /> Logout{\" \"}\r\n          </Link>\r\n        </Menu.Item>\r\n      </Menu>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { Table, Divider, Typography } from \"antd\";\r\n\r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/database\";\r\n\r\nconst newColumns = [\r\n  {\r\n    title: \"Name\",\r\n    dataIndex: \"name\",\r\n    key: \"name\"\r\n  },\r\n  {\r\n    title: \"Birthday\",\r\n    dataIndex: \"birthday\",\r\n    key: \"birthday\"\r\n  },\r\n  {\r\n    title: \"Current Amount\",\r\n    dataIndex: \"camount\",\r\n    key: \"camount\"\r\n  },\r\n  {\r\n    title: \"Pre Amount\",\r\n    dataIndex: \"pbalances\",\r\n    key: \"pbalances\"\r\n  },\r\n  {\r\n    title: \"Total Balance\",\r\n    dataIndex: \"tbalances\",\r\n    key: \"tbalances\"\r\n  },\r\n  {\r\n    title: \"Status\",\r\n    dataIndex: \"status\",\r\n    key: \"status\"\r\n  }\r\n];\r\n\r\n// const columns = [\r\n//   {\r\n//     title: \"Name\",\r\n//     dataIndex: \"name\",\r\n//     key: \"name\",\r\n//     render: text => <a href=\"https://google.com\">{text}</a>\r\n//   },\r\n//   {\r\n//     title: \"Pre Balance\",\r\n//     dataIndex: \"pbalances\",\r\n//     key: \"pbalances\",\r\n//     render: pbalances => (\r\n//       <span>\r\n//         {pbalances.map(pbalance => {\r\n//           let color = pbalance.length > 5 ? \"red\" : \"green\";\r\n//           if (pbalance === 0) {\r\n//             color = \"green\";\r\n//           } else if (pbalance > 0) {\r\n//             color = \"red\";\r\n//           }\r\n//           return (\r\n//             <span style={{ color: color }} key={pbalance}>\r\n//               {\"Rs. \" + pbalance.toUpperCase()}\r\n//             </span>\r\n//           );\r\n//         })}\r\n//       </span>\r\n//     )\r\n//   },\r\n//   {\r\n//     title: \"Current Balance\",\r\n//     dataIndex: \"camount\",\r\n//     key: \"camount\",\r\n//     render: camount => (\r\n//       <span>\r\n//         {camount.map(amount => {\r\n//           let color = amount.length > 5 ? \"red\" : \"green\";\r\n//           if (amount === 0) {\r\n//             color = \"red\";\r\n//           } else if (amount < 0) {\r\n//             color = \"red\";\r\n//           }\r\n//           return (\r\n//             <span style={{ color: color }} key={amount}>\r\n//               {\"Rs. \" + amount.toUpperCase()}\r\n//             </span>\r\n//           );\r\n//         })}\r\n//       </span>\r\n//     )\r\n//   },\r\n//   {\r\n//     title: \"Total Balance\",\r\n//     dataIndex: \"tbalances\",\r\n//     key: \"tbalances\",\r\n//     render: tbalances => (\r\n//       <span>\r\n//         {tbalances.map(tbalance => {\r\n//           let color = tbalance.length > 5 ? \"red\" : \"green\";\r\n//           if (tbalance === 0) {\r\n//             color = \"red\";\r\n//           } else if (tbalance < 0) {\r\n//             color = \"red\";\r\n//           }\r\n//           return (\r\n//             <span style={{ color: color }} key={tbalance}>\r\n//               {\"Rs. \" + tbalance.toUpperCase()}\r\n//             </span>\r\n//           );\r\n//         })}\r\n//       </span>\r\n//     )\r\n//   },\r\n//   {\r\n//     title: \"Payment Type\",\r\n//     dataIndex: \"pType\",\r\n//     key: \"pType\"\r\n//   },\r\n//   {\r\n//     title: \"Status\",\r\n//     key: \"tags\",\r\n//     dataIndex: \"tags\",\r\n//     render: tags => (\r\n//       <span>\r\n//         {tags.map(tag => {\r\n//           let color = tag.length > 5 ? \"red\" : \"green\";\r\n//           if (tag === \"pending\") {\r\n//             color = \"red\";\r\n//           } else if (tag === \"paid\") {\r\n//             color = \"green\";\r\n//           }\r\n//           return (\r\n//             <Tag color={color} key={tag}>\r\n//               {tag.toUpperCase()}\r\n//             </Tag>\r\n//           );\r\n//         })}\r\n//       </span>\r\n//     )\r\n//   }\r\n// ];\r\n\r\nconst { Title } = Typography;\r\n\r\n// const data = [\r\n//   {\r\n//     key: \"1\",\r\n//     name: \"Ajay Kumar Singh\",\r\n//     birthday: \"24 Jan 2019\",\r\n//     pbalances: [\"0\"],\r\n//     tags: [\"pending\"],\r\n//     camount: [\"100\"],\r\n//     pType: \"Cash\",\r\n//     tbalances: [\"-100\"]\r\n//   },\r\n//   {\r\n//     key: \"2\",\r\n//     name: \"Ankur Kadiyan\",\r\n//     birthday: \"30 Jan 2019\",\r\n//     pbalances: [\"0\"],\r\n//     tags: [\"Paid\"],\r\n//     camount: [\"100\"],\r\n//     pType: \"Cash\",\r\n//     tbalances: [\"100\"]\r\n//   },\r\n//   {\r\n//     key: \"3\",\r\n//     name: \"Abhinav Saini\",\r\n//     birthday: \"24 Jan 2019\",\r\n//     pbalances: [\"100\"],\r\n//     tags: [\"pending\"],\r\n//     camount: [\"100\"],\r\n//     pType: \"PayTM\",\r\n//     tbalances: [\"-200\"]\r\n//   },\r\n//   {\r\n//     key: \"4\",\r\n//     name: \"Mohammed Sareef\",\r\n//     birthday: \"05 Oct 1985\",\r\n//     pbalances: [\"0\"],\r\n//     tags: [\"Paid\"],\r\n//     camount: [\"100\"],\r\n//     pType: \"PayTM\",\r\n//     tbalances: [\"100\"]\r\n//   },\r\n//   {\r\n//     key: \"5\",\r\n//     name: \"Monika Sharma\",\r\n//     birthday: \"24 Jan 2019\",\r\n//     pbalances: [\"200\"],\r\n//     tags: [\"pending\"],\r\n//     camount: [\"100\"],\r\n//     pType: \"PayTM\",\r\n//     tbalances: [\"-300\"]\r\n//   },\r\n//   {\r\n//     key: \"6\",\r\n//     name: \"Sanjeev\",\r\n//     birthday: \"24 Jan 2019\",\r\n//     pbalances: [\"100\"],\r\n//     tags: [\"pending\"],\r\n//     camount: [\"100\"],\r\n//     pType: \"Cash\",\r\n//     tbalances: [\"-200\"]\r\n//   },\r\n//   {\r\n//     key: \"7\",\r\n//     name: \"Lalit\",\r\n//     birthday: \"24 Jan 2019\",\r\n//     pbalances: [\"100\"],\r\n//     tags: [\"pending\"],\r\n//     camount: [\"100\"],\r\n//     pType: \"PayTM\",\r\n//     tbalances: [\"-200\"]\r\n//   },\r\n//   {\r\n//     key: \"8\",\r\n//     name: \"Gaurav Goyal\",\r\n//     birthday: \"24 Jan 2019\",\r\n//     pbalances: [\"300\"],\r\n//     tags: [\"pending\"],\r\n//     camount: [\"100\"],\r\n//     pType: \"Cash\",\r\n//     tbalances: [\"-400\"]\r\n//   }\r\n// ];\r\n\r\nfunction Dashboard() {\r\n  const [dataObj, setDataObj] = useState();\r\n\r\n  firebase\r\n    .database()\r\n    .ref()\r\n    .child(\"team-member\")\r\n    .once(\"value\", snap => {\r\n      //console.log(snap.val());\r\n      setDataObj(snap.val());\r\n    });\r\n\r\n  // rootRef.on(\"value\", snap => {\r\n  //   setDataObj([snap.val()]);\r\n  //   console.log(\"Name: \" + snap.val());\r\n  //   //console.log(\"DataObj: \" + dataObj.name);\r\n  // });\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Title>Dashboard</Title>\r\n      <Divider />\r\n      <Table columns={newColumns} dataSource={dataObj} size=\"small\" />\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Dashboard;\r\n","import React from \"react\";\r\nimport { Divider, Typography } from \"antd\";\r\nimport styled from \"styled-components\";\r\n\r\nconst { Title } = Typography;\r\n\r\nconst PageTitle = styled.h1`\r\n  color: black;\r\n  padding: 6px 6px 6px 20px;\r\n  background-color: #f2f2f2;\r\n  font-size: 2em;\r\n`;\r\n\r\nconst LiTag = styled.li`\r\n  list-style: none;\r\n`;\r\n\r\nconst items = [\r\n  { id: 1, name: \"Mohammed Sareef\", dob: \"05 Oct 1985\" },\r\n  { id: 2, name: \"Ajay Kumar Singh\", dob: \"05 Oct 1985\" },\r\n  { id: 3, name: \"Gaurav Goyal\", dob: \"05 Oct 1985\" },\r\n  { id: 4, name: \"Ankur Kadiyan\", dob: \"05 Oct 1985\" },\r\n  { id: 5, name: \"Lalit Pratap Singh\", dob: \"05 Oct 1985\" }\r\n];\r\n\r\nfunction List({ items, renderItem }) {\r\n  return <ul>{items.map(renderItem)}</ul>;\r\n}\r\n\r\nList.defaultProps = {\r\n  renderItem: item => (\r\n    <LiTag key={item.id}>\r\n      <PageTitle>\r\n        {item.name} - {item.dob}\r\n      </PageTitle>\r\n    </LiTag>\r\n  )\r\n};\r\n\r\nfunction Dashboard() {\r\n  return (\r\n    <>\r\n      <Title>Home</Title>\r\n      <Divider />\r\n      <h1>Upcoming Birthday List</h1>\r\n      <List items={items} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Dashboard;\r\n","import React from \"react\";\r\nimport { Divider, Typography } from \"antd\";\r\n\r\nconst { Title } = Typography;\r\n\r\nfunction Dashboard() {\r\n  return (\r\n    <React.Fragment>\r\n      <Title>Add Budget</Title>\r\n      <Divider />\r\n      <h1>Add Budget</h1>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Dashboard;\r\n","import React from \"react\";\r\nimport { Divider, Typography } from \"antd\";\r\n\r\nconst { Title } = Typography;\r\n\r\nfunction UserDetails() {\r\n  return (\r\n    <React.Fragment>\r\n      <Title>User Details</Title>\r\n      <Divider />\r\n      <h1>User Details</h1>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default UserDetails;\r\n","import React from \"react\";\r\nimport { Divider, Typography } from \"antd\";\r\n\r\nconst { Title } = Typography;\r\n\r\nfunction Setting() {\r\n  return (\r\n    <React.Fragment>\r\n      <Title>Setting</Title>\r\n      <Divider />\r\n      <h1>Setting</h1>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Setting;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport \"antd/dist/antd.css\";\r\n//import styled from \"styled-components\";\r\nimport { Row, Col, Divider } from \"antd\";\r\nimport { Route, BrowserRouter as Router } from \"react-router-dom\";\r\nimport Sidebar from \"./Sidebar\";\r\nimport Dashboard from \"./Dashboard\";\r\nimport Home from \"./Home\";\r\nimport AddBudget from \"./AddBudget\";\r\nimport UserDetails from \"./UserDetails\";\r\nimport Setting from \"./Setting\";\r\n\r\n//import { ButtonGroup } from \"./button\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Row type=\"flex\" justify=\"center\">\r\n        <Col span={22}>\r\n          <Router>\r\n            <Sidebar />\r\n            {/* <ButtonGroup as=\"a\" href=\"https://google.com\" className=\"primary\">\r\n            Go to page\r\n          </ButtonGroup>\r\n          <ButtonGroup type=\"submit\" className=\"primary\">\r\n            Submit\r\n          </ButtonGroup>\r\n          <ButtonGroup type=\"reset\" className=\"btn-link\">\r\n            Reset\r\n          </ButtonGroup>\r\n          <ButtonGroup type=\"submit\">\r\n            <strong>Click!</strong>\r\n          </ButtonGroup> */}\r\n\r\n            <Divider />\r\n            <Route exact path=\"/\" component={Home} />\r\n            <Route path=\"/Dashboard\" component={Dashboard} />\r\n            <Route path=\"/AddBudget\" component={AddBudget} />\r\n            <Route path=\"/UserDetails\" component={UserDetails} />\r\n            <Route path=\"/Setting\" component={Setting} />\r\n          </Router>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/database\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAq4PPO0Xp-0U2Qa9lKKvAM5fU8oPrhynk\",\r\n  authDomain: \"birthday-app-967ba.firebaseapp.com\",\r\n  databaseURL: \"https://birthday-app-967ba.firebaseio.com\",\r\n  projectId: \"birthday-app-967ba\",\r\n  storageBucket: \"birthday-app-967ba.appspot.com\",\r\n  messagingSenderId: \"514839011667\",\r\n  appId: \"1:514839011667:web:f987ff7eada6ee7e7541a6\",\r\n  measurementId: \"G-FYQ1P6S5J9\"\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}